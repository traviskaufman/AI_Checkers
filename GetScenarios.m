function [scenarios] = GetScenarios
%GETSCENARIOS Get different scenarios for testing.
%   Returns a map where each key represents a scenario and each value
%   is an array of structures that emulates the board state given that
%   scenario.
RED = 1;
BLACK = 2;
KING_RED = 3;
KING_BLACK = 4;

scenarios = containers.Map;

% Scenario 1 - jump forward is obliged and no jump backwards for regular
% pieces
scenarios('JMP_FWD_NO_JMP_BKWD') = [
    struct('row', 3, 'column', 2, 'color', RED), ...
    struct('row', 4, 'column', 3, 'color', BLACK), ...
    struct('row', 3, 'column', 6, 'color', RED), ...
    struct('row', 6, 'column', 3, 'color', BLACK), ...
    struct('row', 7, 'column', 4, 'color', RED), ...
    struct('row', 8, 'column', 1, 'color', BLACK)
];

% Scenario 2 - king promotion and checking the game ended by lack of pieces
% (no move)
scenarios('KNG_PROMO_NO_PCS_END_GAME') = [
    struct('row', 4, 'column', 3, 'color', RED), ...
    struct('row', 5, 'column', 4, 'color', BLACK), ...
    struct('row', 3, 'column', 6, 'color', RED), ...
    struct('row', 7, 'column', 4, 'color', BLACK)
];

% Scenario 3 - king promotion and checking  game ended by lack of move
scenarios('KNG_PROMO_NO_MVS_END_GAME') = [
    struct('row', 4, 'column', 3, 'color', RED), ...
    struct('row', 5, 'column', 4, 'color', BLACK), ...
    struct('row', 3, 'column', 6, 'color', RED), ...
    struct('row', 7, 'column', 4, 'color', BLACK), ...
    struct('row', 4, 'column', 7, 'color', RED), ...
    struct('row', 5, 'column', 8, 'color', BLACK)
];

% Scenario 4 - king can move and jump forward and backward, and it is
% obliged to jump
scenarios('KNG_FWD_BKWD_JMP') = [
    struct('row', 7, 'column', 2, 'color', BLACK), ...
    struct('row', 8, 'column', 3, 'color', KING_RED), ...
    struct('row', 5, 'column', 4, 'color', BLACK), ...
    struct('row', 2, 'column', 5, 'color', RED), ...
    struct('row', 2, 'column', 7, 'color', RED), ...
    struct('row', 1, 'column', 8, 'color', KING_BLACK)
];

end

